package main

import (
	"context"
	"fmt"

	"github.com/lucasepe/codename"
	"github.com/spf13/cobra"
	appsv1 "k8s.io/api/apps/v1"
	apiv1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	k8serrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"

	"github.com/calyptia/api/types"
)

func newCmdCreateAggregator(config *config) *cobra.Command {
	var aggregatorName string
	var namespace string

	loadingRules := clientcmd.NewDefaultClientConfigLoadingRules()
	configOverrides := &clientcmd.ConfigOverrides{}

	cmd := &cobra.Command{
		Use:   "core_instance",
		Short: "Setup a new core instance on kubernetes",
		RunE: func(cmd *cobra.Command, args []string) error {
			kubeConfig := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(loadingRules, configOverrides)

			kubeClientConfig, err := kubeConfig.ClientConfig()
			if err != nil {
				return err
			}

			clientset, err := kubernetes.NewForConfig(kubeClientConfig)
			if err != nil {
				return err
			}

			ctx := context.Background()

			if aggregatorName != "" {
				exists, err := config.aggregatorExistsWithName(ctx, aggregatorName)
				if err != nil {
					return err
				}

				if exists {
					return fmt.Errorf("aggregator name %q taken", aggregatorName)
				}
			} else {
				var err error
				aggregatorName, err = generateAggregatorName()
				if err != nil {
					return err
				}
			}

			k8sClient := &k8sClient{
				Clientset:    clientset,
				projectID:    config.projectID,
				projectToken: config.projectToken,
				cloudBaseURL: config.baseURL,
			}

			if err := k8sClient.ensureNamespace(ctx, namespace); err != nil {
				return err
			}

			clusterRole, err := k8sClient.createClusterRole(ctx, namespace, aggregatorName)
			if err != nil {
				return err
			}

			fmt.Printf("cluster role: %q\n", clusterRole.Name)

			serviceAccount, err := k8sClient.createServiceAccount(ctx, namespace, aggregatorName)
			if err != nil {
				return err
			}

			fmt.Printf("service account: %q\n", serviceAccount.Name)

			binding, err := k8sClient.createClusterRoleBinding(ctx, namespace, aggregatorName)
			if err != nil {
				return err
			}

			fmt.Printf("cluster role binding: %q\n", binding.Name)

			deploy, err := k8sClient.createDeployment(ctx, namespace, aggregatorName)
			if err != nil {
				return err
			}

			fmt.Printf("deployment: %q\n", deploy.Name)

			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringVar(&aggregatorName, "name", "", "Aggregator name (autogenerated if empty)")
	fs.StringVar(&namespace, "namespace", apiv1.NamespaceDefault, "Namespace")
	clientcmd.BindOverrideFlags(configOverrides, fs, clientcmd.RecommendedConfigOverrideFlags("kube-"))

	return cmd
}

type k8sClient struct {
	*kubernetes.Clientset
	projectID    string
	projectToken string
	cloudBaseURL string
}

func (client *k8sClient) ensureNamespace(ctx context.Context, namespace string) error {
	exists, err := client.namespaceExists(ctx, namespace)
	if err != nil {
		return err
	}

	if exists {
		return nil
	}

	_, err = client.createNamespace(ctx, namespace)
	return err
}

func (client *k8sClient) namespaceExists(ctx context.Context, namespace string) (bool, error) {
	_, err := client.CoreV1().Namespaces().Get(ctx, namespace, metav1.GetOptions{})
	if k8serrors.IsNotFound(err) {
		return false, nil
	}

	if err != nil {
		return false, err
	}

	return true, nil
}

func (client *k8sClient) createNamespace(ctx context.Context, namespace string) (*apiv1.Namespace, error) {
	return client.CoreV1().Namespaces().Create(ctx, &apiv1.Namespace{
		ObjectMeta: metav1.ObjectMeta{
			Name:   namespace,
			Labels: map[string]string{
				// TODO: decide what to do
			},
		},
	}, metav1.CreateOptions{})
}

func (client *k8sClient) createClusterRole(ctx context.Context, namespace, aggregatorName string) (*rbacv1.ClusterRole, error) {
	return client.RbacV1().ClusterRoles().Create(ctx, &rbacv1.ClusterRole{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: namespace,
			Name:      aggregatorName + "-cluster-role",
			Labels: map[string]string{
				"calyptia_project_id":      client.projectID,
				"calyptia_aggregator_name": aggregatorName,
			},
		},
		Rules: []rbacv1.PolicyRule{
			{
				APIGroups: []string{"", "apps"},
				Resources: []string{
					"namespaces",
					"deployments",
					"replicasets",
					"pods",
					"services",
					"configmaps",
					"deployments/scale",
					"secrets",
				},
				Verbs: []string{
					"get",
					"list",
					"create",
					"delete",
					"patch",
					"update",
					"watch",
					"deletecollection",
				},
			},
		},
	}, metav1.CreateOptions{})
}

func (client *k8sClient) createServiceAccount(ctx context.Context, namespace, aggregatorName string) (*apiv1.ServiceAccount, error) {
	return client.CoreV1().ServiceAccounts(namespace).Create(ctx, &apiv1.ServiceAccount{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: namespace,
			Name:      aggregatorName + "-service-account",
			Labels: map[string]string{
				"calyptia_project_id":      client.projectID,
				"calyptia_aggregator_name": aggregatorName,
			},
		},
	}, metav1.CreateOptions{})
}

func (client *k8sClient) createClusterRoleBinding(ctx context.Context, namespace, aggregatorName string) (*rbacv1.ClusterRoleBinding, error) {
	return client.RbacV1().ClusterRoleBindings().Create(ctx, &rbacv1.ClusterRoleBinding{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: namespace,
			Name:      aggregatorName + "-cluster-role-binding",
			Labels: map[string]string{
				"calyptia_project_id":      client.projectID,
				"calyptia_aggregator_name": aggregatorName,
			},
		},
		RoleRef: rbacv1.RoleRef{
			APIGroup: "rbac.authorization.k8s.io",
			Kind:     "ClusterRole",
			Name:     aggregatorName + "-cluster-role",
		},
		Subjects: []rbacv1.Subject{
			{
				Kind:      "ServiceAccount",
				Name:      aggregatorName + "-service-account",
				Namespace: namespace,
			},
		},
	}, metav1.CreateOptions{})
}

func (client *k8sClient) createDeployment(ctx context.Context, namespace, aggregatorName string) (*appsv1.Deployment, error) {
	return client.AppsV1().Deployments(namespace).Create(ctx, &appsv1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: namespace,
			Name:      aggregatorName + "-deployment",
			Labels: map[string]string{
				"calyptia_project_id":      client.projectID,
				"calyptia_aggregator_name": aggregatorName,
			},
		},
		Spec: appsv1.DeploymentSpec{
			Replicas: ptr(int32(1)),
			Selector: &metav1.LabelSelector{
				MatchLabels: map[string]string{
					"calyptia_project_id":      client.projectID,
					"calyptia_aggregator_name": aggregatorName,
				},
			},
			Template: apiv1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{
						"calyptia_project_id":      client.projectID,
						"calyptia_aggregator_name": aggregatorName,
					},
				},
				Spec: apiv1.PodSpec{
					ServiceAccountName:           aggregatorName + "-service-account",
					AutomountServiceAccountToken: ptr(true),
					Containers: []apiv1.Container{
						{
							Name:  aggregatorName,
							Image: "ghcr.io/calyptia/core",
							Args:  []string{"-debug=true"},
							Env: []apiv1.EnvVar{
								{
									Name:  "AGGREGATOR_NAME",
									Value: aggregatorName,
								},
								{
									Name:  "PROJECT_TOKEN",
									Value: client.projectToken,
								},
								{
									Name:  "AGGREGATOR_FLUENTBIT_CLOUD_URL",
									Value: client.cloudBaseURL,
								},
							},
						},
					},
				},
			},
		},
	}, metav1.CreateOptions{})
}

func (config *config) aggregatorExistsWithName(ctx context.Context, name string) (bool, error) {
	aa, err := config.cloud.Aggregators(ctx, config.projectID, types.AggregatorsParams{
		Name: &name,
		Last: ptr(uint64(1)),
	})
	if err != nil {
		return false, err
	}

	return len(aa.Items) != 0, nil
}

func ptr[T any](p T) *T {
	return &p
}

func generateAggregatorName() (string, error) {
	rng, err := codename.DefaultRNG()
	if err != nil {
		return "", err
	}

	return codename.Generate(rng, 4), nil
}
